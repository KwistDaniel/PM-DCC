declaracion_parametro:
	-La regla 27 no la entiendo bien, REVISADA
		Esto es para la llamada, no para la definicion, se verifica despues
	-Ver lo de antes de insertarTS(), la info que falta llenar

declarador_init:
	-lo de controlar el tipo del arreglo? REVISADO
	-como le doy la cant de elems? onda el else o asi pelado? REVISADO
	-encontre leyendo los errores ese error 74, esta bien ponerlo ahi? REVISADO
	-else if((dimension > 0) && cantidad_elementos != dimension) REVISADO, es >
		ver ese control, cambiar != a > creo que es por error 76
		EL SISTEMA DE TIPOS CREO QUE NO ME DICE NADA DE ESTO
		En esta parte tmb estoy controlando bien la regla 8? osea que si tiene constante ([8]) y lista de inic sea de mismo tama単o?
		El tema con la linea de arriba es que si la lista de inic es de mas tama単o, el cartel de error 76 me dice que esta bien

factor:
	-en case CIDENT, lo doy de alta tipo error si no existe? REVISADO



<<<<<<< Updated upstream
Nota de la profe:
	Revisar el control que producciones toca, oseea cual se involucra, asi las puedo analizar
=======


Que info guardo en ts?

Parte fija:
	nombre (nombre id) (string)
	clase (CLASTYPE | CLASVAR | CLASFUN | CLASPAR) (entero 1,2,3,4 respectivo)
	ptr_tipo (TIPOVOID | TIPOCHAR ....) (es entero, pos en la tabla)
	cant_byte (es lo que ocupa para el stack de ejecucion) (no nec ahora, es el SIZEOF( cada tipo), en funcion es el retorno)
	descriptor, puntero a la info adicional de la var, func o par

Parte variable:
	-param (parametro)
		tipo_pje ('d' | 'v')REVISAR QUE SEAN ESOS (char, especifica el pasaje)
		ptero_tipo_base (si es arreglo, guardo el tipo base aca)
	-sub (subrutina/funcion)
		dir_cod () (es la direccion de memoria a donde tiene que bifurcar la instruccion) (no es necesario ahora)
		cant_par (entero) (me indica cuantos tiene la funcion)
		puntero parametros (ver como se usa)


	-arr (arreglo)
		ptero_tipo_base (entero, es el ptr_tipo que me dice la base del arreglo) (ver de que tipos se pueden definir)
		cant_elem (entero que guarda la cant de elementos)
>>>>>>> Stashed changes







-el -1 no me lo toma como entero, ver lote 2 REVISADO


- Que onda si tengo 2 main?
	con esto tmb revisar si cierro el nivel bien con el main, mejor dicho, si lo abro bien, 6/10 creo que como es nivel 0 ya esta abierto, pero lo que si si defino un main tengo que pasarle el parametro que lo abra a la declaracion de funcion pq necesito que lo que este adentro sea de otro nivel que el main
	me falta algo sobre el main, que como es de nivel 0 no lo estoy controlando
	debo tener si o si un main? el sistema de tipos dice exactamente una vez, asik debo tener un main parece
	REVISION: DEBO TENER SI O SI UN MAIN Y SOLO UNO (sin arg etc etc), ver que este en nivel 0 pero lo de dentro no, el flag ese que mando cuando defino funciones

en declaracion
     cuando veo el errorahndler 73, esta bien ponerle tipo error?
     tambien en especificador_declaracion hago lo mismo
     REVISADO

Sobre error 73, no me dice nada que la definicion de parametros no debe ser void, no controlo eso entonces多
pq sino donde dice que un parametro no puede ser de tipo void la flasha
Con esto controlo que no pueda ser (esta bien que cuando le trate de pasar el param en la invocacion no voy a poder, pero me deja definirlo asi y no me tira error
sera decision de dise単o mia marcar eso?
    es en declaracion_parametro, ya lo puse pero lo saco sino
    REVISADO ESTAS LINEAS


todo: Analizar que si declaro una variable no exista ya en el mismo nivel (Cuando guardo el sbol->lexema pre ident para crearlo (despues del tipo) ver que no exista ya en el mismo nivel, ATENCION CON LOS PARAMETROS: void f(int a, int a){}

todo: revisar que si declaro adentro de un if, while, etc sea otro nivel

todo: ver que si tiro un error en la definicion de algo, darle tipo error a eso que defino. En declarador_init tengo varios casos para dar tipo error creo

todo: actualizar parametros de prototipos en parser.h



Decir que agregue control de que el parametro no puede ser void pq es una "var" que la estoy dando como void (por lectura del mensaje de error 73)

tambien que agregue el error 101 por lote CE2lote2.c

tambien agregue error 102 porque en error.c dice que main no puede ser void, pero el sistema de tipos no lo especifica



7/10: Que hago con las variables y funciones repetidas? se insertan o no? k onda?


proposicion_compuesta
    era pop_nivel?

definicion_funcion
    if(strcmp(inf_id->nbre,"main") != 0){ //Si el id de la funcion no es main
        pushTB(); //Aumento nivel
    }
    //**ESTO DE ACA ARRIBA VA?**//
    /*Creo que no, por eso lo saque*/





    EN DECLARADOR INIT ME FALTAN COSAS